"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.2.6.
Docs: https://docs.djangoproject.com/en/5.2/
"""

from pathlib import Path
import os

# -------------------------------
# Helpers
# -------------------------------

def get_bool(name: str, default: bool = False) -> bool:
    """Parse boolean env vars like: 1/0, true/false, yes/no, on/off"""
    val = os.environ.get(name)
    if val is None:
        return default
    return val.lower() in ("1", "true", "yes", "on")

def _split_env(name: str, default: str = "") -> list[str]:
    """
    Parse comma OR space separated env lists into Python lists.
    e.g., "a,b" or "a b" -> ["a", "b"]
    # NEW: added to normalize host/origin envs
    """
    raw = os.environ.get(name, default)
    raw = raw.replace(" ", ",")
    return [p.strip() for p in raw.split(",") if p.strip()]

# -------------------------------
# Paths
# -------------------------------

BASE_DIR = Path(__file__).resolve().parent.parent

# -------------------------------
# Core
# -------------------------------

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'dev-insecure-key')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_bool("DJANGO_DEBUG", True)

# Comma/space-separated hosts, e.g. "example.com .example.com localhost 127.0.0.1"
# CHANGED: now uses _split_env for flexible parsing
ALLOWED_HOSTS = _split_env("DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1")

# -------------------------------
# Applications
# -------------------------------

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "corsheaders",  # (django-cors-headers)
    "api",
]

# MIDDLEWARE order matters for CORS/WhiteNoise.
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",     # serving static files in prod
    "corsheaders.middleware.CorsMiddleware",          # CHANGED: early for CORS headers
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"

# -------------------------------
# Database
# -------------------------------
# CHANGED: Switched from hardcoded SQLite to env-driven config using dj-database-url.
#          Defaults to SQLite for local dev if DATABASE_URL is not set.

# pip install dj-database-url psycopg2-binary
import dj_database_url  # NEW

DATABASES = {
    "default": dj_database_url.config(
        env="DATABASE_URL",
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",  # fallback for dev
        conn_max_age=600,  # persistent connections for prod
    )
}

# -------------------------------
# Password validation
# -------------------------------

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# -------------------------------
# Internationalization
# -------------------------------

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# -------------------------------
# Static & Media
# -------------------------------

# CHANGED: WhiteNoise already enabled in MIDDLEWARE. This is production-safe.
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# -------------------------------
# CORS / CSRF
# -------------------------------
# CHANGED: Use env-driven, scheme+host for CSRF_TRUSTED_ORIGINS (required by Django).
# Example envs on Railway:
#   CORS_ALLOWED_ORIGINS=https://superbloom-frontend.vercel.app
#   CSRF_TRUSTED_ORIGINS=https://superbloombackend.up.railway.app,https://superbloom-frontend.vercel.app

# CORS (django-cors-headers â‰¥ 4)
_cors_origins = _split_env(
    "CORS_ALLOWED_ORIGINS",
    "http://localhost:5173,http://127.0.0.1:5173"
)
CORS_ALLOWED_ORIGINS = _cors_origins
CORS_ALLOW_CREDENTIALS = True  # ok even if you use token auth

# CSRF trusted origins must include full scheme+host
_csrf_trusted = _split_env(
    "CSRF_TRUSTED_ORIGINS",
    "http://localhost,http://127.0.0.1"
)
CSRF_TRUSTED_ORIGINS = _csrf_trusted if _csrf_trusted else []

# -------------------------------
# Security (Prod)
# -------------------------------
# CHANGED: Hardened when DEBUG=False

if not DEBUG:
    SECURE_HSTS_SECONDS = int(os.environ.get("SECURE_HSTS_SECONDS", "3600"))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = get_bool("SECURE_HSTS_INCLUDE_SUBDOMAINS", True)
    SECURE_HSTS_PRELOAD = get_bool("SECURE_HSTS_PRELOAD", True)
    SECURE_SSL_REDIRECT = get_bool("SECURE_SSL_REDIRECT", True)

    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    # Legacy headers (safe)
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

# If your frontend consumes cookie/session auth from a different domain,
# uncomment the following (and ensure HTTPS everywhere):
# SESSION_COOKIE_SAMESITE = "None"
# CSRF_COOKIE_SAMESITE = "None"

# -------------------------------
# Proxy / HTTPS detection (Railway/other PaaS)
# -------------------------------
# CHANGED: keep these to respect X-Forwarded-* from Railway
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# -------------------------------
# App defaults
# -------------------------------

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# -------------------------------
# Optional: Google Sheets export placeholders
# -------------------------------

GOOGLE_SHEETS_CREDENTIALS_FILE = None  # e.g., BASE_DIR / "service_account.json"
GOOGLE_SHEETS_SPREADSHEET_ID = None
